// ./client/src/pages/Home.jsx
// client/src/pages/Home.jsx
import React from 'react';import{Box,Typography,Button,Paper,Stack}from '@mui/material';import{RateReview,AddCircle,Login,PersonAdd}from '@mui/icons-material';import{Link as RouterLink}from 'react-router-dom';import{ToastContainer}from 'react-toastify';import UserContext from '../contexts/UserContext';import{useContext}from 'react';function Home(){const{user}=useContext(UserContext);return(<Box
sx={{minHeight:'100vh',minWidth:'100vw',bgcolor:'#f5f6fa',display:'flex',flexDirection:'column',alignItems:'center',justifyContent:'center',py:4,}}><Paper elevation={3}sx={{p:{xs:3,sm:5},borderRadius:3,maxWidth:400,width:'100%',textAlign:'center'}}><Stack spacing={2}direction="column" alignItems="center"><Button
component={RouterLink}to="/reviews"
variant="contained"
startIcon={<RateReview/>}size="large"
fullWidth
sx={{textTransform:'none'}}>Go to Reviews</Button><Button
component={RouterLink}to={user?"/addreview":"/login"}variant="outlined"
startIcon={<AddCircle/>}size="large"
fullWidth
sx={{textTransform:'none'}}>Add a Review</Button><Button
component={RouterLink}to="/login"
variant="text"
startIcon={<Login/>}size="large"
fullWidth
sx={{textTransform:'none'}}>Login</Button><Button
component={RouterLink}to="/register"
variant="text"
startIcon={<PersonAdd/>}size="large"
fullWidth
sx={{textTransform:'none'}}>Register</Button></Stack><Typography variant="body2" sx={{mt:4,color:'text.secondary'}}>Â©{new Date().getFullYear()}Descode. All rights reserved.</Typography></Paper><ToastContainer/></Box>);}export default Home;

// ./client/src/pages/Register.jsx
// client/src/pages/Register.jsx
import React,{useState}from 'react';import{Box,Typography,TextField,Button,IconButton,InputAdornment,Link}from '@mui/material';import{Visibility,VisibilityOff}from '@mui/icons-material';import{useNavigate,useLocation}from 'react-router-dom';import{useFormik}from 'formik';import{ToastContainer,toast}from 'react-toastify';import * as yup from 'yup';import http from '../http';import 'react-toastify/dist/ReactToastify.css';function Register(){const navigate=useNavigate();const location=useLocation();const params=new URLSearchParams(location.search);const from=params.get('from')||'/';const [loading,setLoading]=useState(false);const [showPassword,setShowPassword]=useState(false);const [showConfirm,setShowConfirm]=useState(false);const trimAll=(obj)=>Object.fromEntries(Object.entries(obj).map(([k,v])=>typeof v==="string"?[k,v.trim()]:[k,v]));const formik=useFormik({initialValues:{name:"",email:"",password:"",confirmPassword:""},validationSchema:yup.object({name:yup.string().trim().min(3,'Name must be at least 3 characters').max(50,'Name must be at most 50 characters').required('Name is required').matches(/^[a-zA-Z '-,.]+$/,"Name only allow letters,spaces and characters:' - ,."),email:yup.string().trim().email('Enter a valid email').max(50,'Email must be at most 50 characters').required('Email is required'),password:yup.string().trim().min(8,'Password must be at least 8 characters').max(50,'Password must be at most 50 characters').required('Password is required').matches(/^(?=.*[a-zA-Z])(?=.*[0-9]).{8,}$/,"Password at least 1 letter and 1 number"),confirmPassword:yup.string().trim().required('Confirm password is required').oneOf([yup.ref('password')],'Passwords must match')}),onSubmit:async(data)=>{setLoading(true);data=trimAll(data);data.email=data.email.toLowerCase();try{const res=await http.post("/user/register",data);localStorage.setItem("accessToken",res.data.accessToken);toast.success("Registration successful! Logging you in...");setTimeout(()=>{navigate(from,{replace:true});window.location.reload();},1000);}catch(err){const msg=err.response?.data?.message||err.response?.data?.errors?.[0]||"Registration failed";toast.error(msg);}finally{setLoading(false);}}});return(<Box sx={{marginTop:8,display:'flex',flexDirection:'column',alignItems:'center'}}><Typography variant="h5" sx={{my:2}}>Register</Typography><Box component="form" sx={{maxWidth:'500px'}}onSubmit={formik.handleSubmit}><TextField
fullWidth margin="dense" autoComplete="off"
label="Name" name="name"
value={formik.values.name}onChange={formik.handleChange}onBlur={formik.handleBlur}error={formik.touched.name&&Boolean(formik.errors.name)}helperText={formik.touched.name&&formik.errors.name}/><TextField
fullWidth margin="dense" autoComplete="off"
label="Email" name="email"
value={formik.values.email}onChange={formik.handleChange}onBlur={formik.handleBlur}error={formik.touched.email&&Boolean(formik.errors.email)}helperText={formik.touched.email&&formik.errors.email}/><TextField
fullWidth margin="dense" autoComplete="off"
label="Password" name="password" type={showPassword?"text":"password"}value={formik.values.password}onChange={formik.handleChange}onBlur={formik.handleBlur}error={formik.touched.password&&Boolean(formik.errors.password)}helperText={formik.touched.password&&formik.errors.password}InputProps={{endAdornment:(<InputAdornment position="end"><IconButton
onClick={()=>setShowPassword((s)=>!s)}edge="end"
tabIndex={-1}>{showPassword?<VisibilityOff/>:<Visibility/>}</IconButton></InputAdornment>)}}/><TextField
fullWidth margin="dense" autoComplete="off"
label="Confirm Password" name="confirmPassword" type={showConfirm?"text":"password"}value={formik.values.confirmPassword}onChange={formik.handleChange}onBlur={formik.handleBlur}error={formik.touched.confirmPassword&&Boolean(formik.errors.confirmPassword)}helperText={formik.touched.confirmPassword&&formik.errors.confirmPassword}InputProps={{endAdornment:(<InputAdornment position="end"><IconButton
onClick={()=>setShowConfirm((s)=>!s)}edge="end"
tabIndex={-1}>{showConfirm?<VisibilityOff/>:<Visibility/>}</IconButton></InputAdornment>)}}/><Button
fullWidth variant="contained" sx={{mt:2}}type="submit" disabled={loading||!formik.isValid}>{loading?"Registering...":"Register"}</Button><Box sx={{mt:2,textAlign:'center'}}><Link href="/login" underline="hover">Already have an account?Login</Link></Box></Box><ToastContainer/></Box>);}export default Register;

// ./client/src/pages/Login.jsx
// client/src/pages/Login.jsx
import React,{useState}from 'react';import{Box,Typography,TextField,Button,IconButton,InputAdornment,Link}from '@mui/material';import{Visibility,VisibilityOff}from '@mui/icons-material';import{useNavigate,useLocation}from 'react-router-dom';import{useFormik}from 'formik';import{ToastContainer,toast}from 'react-toastify';import * as yup from 'yup';import http from '../http';function Login(){const navigate=useNavigate();const location=useLocation();const params=new URLSearchParams(location.search);const from=params.get('from')||'/';const [loading,setLoading]=useState(false);const [showPassword,setShowPassword]=useState(false);const formik=useFormik({initialValues:{email:"",password:"",},validationSchema:yup.object({email:yup.string().trim().email('Enter a valid email').max(50,'Email must be at most 50 characters').required('Email is required'),password:yup.string().trim().min(8,'Password must be at least 8 characters').max(50,'Password must be at most 50 characters').required('Password is required').matches(/^(?=.*[a-zA-Z])(?=.*[0-9]).{8,}$/,"Password must have at least 1 letter and 1 number"),}),onSubmit:async(data)=>{setLoading(true);data.email=data.email.trim().toLowerCase();data.password=data.password.trim();try{const res=await http.post("/user/login",data);localStorage.setItem("accessToken",res.data.accessToken);toast.success("Login successful!");setTimeout(()=>{navigate(from,{replace:true});window.location.reload();},1000);}catch(err){const msg=err.response?.data?.message||err.response?.data?.errors?.[0]||"Login failed";toast.error(msg);}finally{setLoading(false);}}});return(<Box sx={{marginTop:8,display:'flex',flexDirection:'column',alignItems:'center'}}><Typography variant="h5" sx={{my:2}}>Login</Typography><Box component="form" sx={{maxWidth:'500px'}}onSubmit={formik.handleSubmit}><TextField
fullWidth margin="dense" autoComplete="off"
label="Email" name="email"
value={formik.values.email}onChange={formik.handleChange}onBlur={formik.handleBlur}error={formik.touched.email&&Boolean(formik.errors.email)}helperText={formik.touched.email&&formik.errors.email}/><TextField
fullWidth margin="dense" autoComplete="off"
label="Password" name="password" type={showPassword?"text":"password"}value={formik.values.password}onChange={formik.handleChange}onBlur={formik.handleBlur}error={formik.touched.password&&Boolean(formik.errors.password)}helperText={formik.touched.password&&formik.errors.password}InputProps={{endAdornment:(<InputAdornment position="end"><IconButton
onClick={()=>setShowPassword((s)=>!s)}edge="end"
tabIndex={-1}>{showPassword?<VisibilityOff/>:<Visibility/>}</IconButton></InputAdornment>)}}/><Button
fullWidth variant="contained" sx={{mt:2}}type="submit" disabled={loading||!formik.isValid}>{loading?"Logging in...":"Login"}</Button><Box sx={{mt:2,textAlign:'center'}}><Link href="/register" underline="hover">Don't have an account?Register</Link></Box></Box><ToastContainer/></Box>);}export default Login;

// ./client/src/pages/EditReview.jsx
// client/src/pages/EditReview.jsx
import React,{useEffect,useState,useContext}from 'react';import{Box,Typography,TextField,Button,CircularProgress,Alert}from '@mui/material';import{useParams,useNavigate}from 'react-router-dom';import{useFormik}from 'formik';import * as yup from 'yup';import http from '../http';import UserContext from '../contexts/UserContext';import StarRating from '../components/StarRating';function EditReview(){const{id}=useParams();const navigate=useNavigate();const{user}=useContext(UserContext);const [loading,setLoading]=useState(true);const [review,setReview]=useState(null);const [error,setError]=useState('');const [saving,setSaving]=useState(false);const [status,setStatus]=useState('loading');useEffect(()=>{http.get(`/reviews/${id}`).then((res)=>{setReview(res.data);setStatus('success');}).catch((err)=>{if(err.response?.status===404){setStatus('not_found')setError('This review does not exist or is deleted.');}else{setStatus('error')setError('Failed to load review.');}}).finally(()=>setLoading(false));},[id]);const formik=useFormik({enableReinitialize:true,initialValues:{title:review?.title||'',description:review?.description||'',stars:review?.stars||3,},validationSchema:yup.object({title:yup.string().required('Title is required').max(100),description:yup.string().required('Description is required').max(500),stars:yup.number().min(1).max(5).required(),}),onSubmit:async(data)=>{if(!user||user.id !==review?.reviewerId){alert('Unauthorized:You cannot edit this review.');return;}try{setSaving(true);await http.put(`/reviews/${id}`,data);navigate(`/reviews/${id}`);}catch(err){alert('Failed to update review.');}finally{setSaving(false);}},});if(loading){return<Box sx={{mt:4,textAlign:'center'}}><CircularProgress/></Box>;}if(error){return<Box sx={{mt:4}}><Alert severity="error">{error}</Alert></Box>;}const isOwner=user&&review?.reviewerId===user?.id;return(<Box sx={{mt:4}}><Typography variant="h5" sx={{mb:2}}>{isOwner?'Edit Review':'View Review'}</Typography><Box component="form" onSubmit={formik.handleSubmit}sx={{maxWidth:600}}><TextField
fullWidth
margin="normal"
label="Title"
name="title"
value={formik.values.title}onChange={formik.handleChange}disabled={!isOwner}error={formik.touched.title&&Boolean(formik.errors.title)}helperText={formik.touched.title&&formik.errors.title}/><TextField
fullWidth
multiline
minRows={3}margin="normal"
label="Description"
name="description"
value={formik.values.description}onChange={formik.handleChange}disabled={!isOwner}error={formik.touched.description&&Boolean(formik.errors.description)}helperText={formik.touched.description&&formik.errors.description}/><Box sx={{mt:2}}><Typography gutterBottom>Rating</Typography><StarRating
value={formik.values.stars}onChange={(newValue)=>formik.setFieldValue('stars',newValue)}readOnly={!isOwner}/></Box>{isOwner&&(<Button
sx={{mt:3}}variant="contained"
type="submit"
disabled={saving||!formik.isValid}>{saving?'Saving...':'Update Review'}</Button>)}</Box></Box>);}export default EditReview;

// ./client/src/pages/AddReview.jsx
// client/src/pages/AddReview.jsx
import React,{useEffect,useState,useContext}from 'react';import{Box,Button,Typography,TextField,Alert,LinearProgress}from '@mui/material';import{useFormik}from 'formik';import{useNavigate}from 'react-router-dom';import * as yup from 'yup';import http from '../http';import StarRating from '../components/StarRating';import UserContext from '../contexts/UserContext';function AddReview(){const navigate=useNavigate();const{user,setUser}=useContext(UserContext);const [error,setError]=useState(null);const [loading,setLoading]=useState(false);const [success,setSuccess]=useState(false);useEffect(()=>{if(!user){navigate('/login');}},[user,navigate]);const formik=useFormik({initialValues:{title:"",description:"",stars:3},validationSchema:yup.object({title:yup.string().trim().min(3,'Title must be at least 3 characters').max(100,'Title must be at most 100 characters').required('Title is required'),description:yup.string().trim().min(3,'Description must be at least 3 characters').max(500,'Description must be at most 500 characters').required('Description is required'),stars:yup.number().min(1).max(5).required()}),onSubmit:(data)=>{setLoading(true);setError(null);data.title=data.title.trim();data.description=data.description.trim();http.post("/reviews",data).then((res)=>{setSuccess(true);setTimeout(()=>navigate("/reviews"),1500);}).catch(err=>{setError('Failed to add review. Please try again.');}).finally(()=>setLoading(false));}});return(<Box><Typography variant="h5" sx={{my:2,fontWeight:'bold'}}>Add Review</Typography><Box component="form" onSubmit={formik.handleSubmit}sx={{maxWidth:500}}>{loading&&<LinearProgress sx={{mb:2}}/>}{error&&<Alert severity="error" sx={{mb:2}}>{error}</Alert>}{success&&<Alert severity="success" sx={{mb:2}}>Review added!</Alert>}<TextField
fullWidth margin="dense" autoComplete="off"
label="Title"
name="title"
value={formik.values.title}onChange={formik.handleChange}onBlur={formik.handleBlur}error={formik.touched.title&&Boolean(formik.errors.title)}helperText={formik.touched.title&&formik.errors.title}/><TextField
fullWidth margin="dense" autoComplete="off"
multiline minRows={2}label="Description"
name="description"
value={formik.values.description}onChange={formik.handleChange}onBlur={formik.handleBlur}error={formik.touched.description&&Boolean(formik.errors.description)}helperText={formik.touched.description&&formik.errors.description}/><Box sx={{mt:2,mb:1}}><Typography variant="subtitle1" sx={{mb:0.5}}>Your Rating</Typography><StarRating
value={formik.values.stars}onChange={(val)=>formik.setFieldValue('stars',val)}readOnly={false}size="large"/>{formik.touched.stars&&formik.errors.stars&&(<Typography color="error" variant="caption">{formik.errors.stars}</Typography>)}</Box><Box sx={{mt:2}}><Button variant="contained" type="submit" disabled={loading}>Add</Button></Box></Box></Box>);}export default AddReview;

// ./client/src/components/AdminNavbar.jsx
import React,{useState}from 'react';import{useNavigate}from 'react-router-dom';import{AppBar,Toolbar,Typography,Button,Menu,MenuItem,IconButton}from '@mui/material';import SettingsIcon from '@mui/icons-material/Settings';export default function AdminNavbar(){const [anchorEl,setAnchorEl]=useState(null);const navigate=useNavigate();const handleMenuOpen=(event)=>setAnchorEl(event.currentTarget);const handleMenuClose=()=>setAnchorEl(null);const handleLogout=()=>{localStorage.removeItem('token');localStorage.removeItem('user');handleMenuClose();navigate('/login');};const goToManageUsers=()=>{navigate('/manage-users');handleMenuClose();};return(<AppBar position="static"><Toolbar><Typography variant="h6" sx={{flexGrow:1}}>Admin Panel</Typography><IconButton color="inherit" onClick={handleMenuOpen}><SettingsIcon/></IconButton><Menu anchorEl={anchorEl}open={Boolean(anchorEl)}onClose={handleMenuClose}><MenuItem onClick={goToManageUsers}>Manage Users</MenuItem><MenuItem onClick={handleLogout}>Logout</MenuItem></Menu></Toolbar></AppBar>);}

// ./client/src/components/StarRating.jsx
import React from 'react';import{Box,IconButton}from '@mui/material';import{Star,StarBorder}from '@mui/icons-material';function StarRating({value=0,onChange=null,readOnly=false,size="medium"}){return(<Box sx={{display:'flex',alignItems:'center'}}>{[1,2,3,4,5].map((star)=>(<IconButton
key={star}size={size}onClick={onChange&&!readOnly?()=>onChange(star):undefined}disabled={readOnly}sx={{color:'#FFD700',p:0.5}}>{value>=star?<Star/>:<StarBorder/>}</IconButton>))}</Box>);}export default StarRating;

// ./client/src/components/ConfirmModal.jsx
import React from 'react';import{Dialog,DialogTitle,DialogContent,DialogContentText,DialogActions,Button}from '@mui/material';export default function ConfirmModal({show,onClose,onConfirm,message,isLoading}){return(<Dialog open={show}onClose={onClose}><DialogTitle>Confirm Action</DialogTitle><DialogContent><DialogContentText>{message}</DialogContentText></DialogContent><DialogActions><Button onClick={onClose}color="inherit" disabled={isLoading}>Cancel</Button><Button onClick={onConfirm}color="error" disabled={isLoading}variant="contained">{isLoading?'Processing...':'Confirm'}</Button></DialogActions></Dialog>);}

// ./client/src/pages/EditProfile.jsx
import React,{useEffect,useState,useContext}from 'react';import{useNavigate}from 'react-router-dom';import{Box,Typography,TextField,Button,CircularProgress}from '@mui/material';import ConfirmModal from '../components/ConfirmModal';import{ToastContainer,toast}from 'react-toastify';import UserContext from '../contexts/UserContext';import http from '../http';export default function EditProfile(){const navigate=useNavigate();const{user,setUser}=useContext(UserContext);const [formData,setFormData]=useState({name:'',email:'',currentPassword:'',newPassword:'',confirmPassword:'',});const [showModal,setShowModal]=useState(false);const [isDeleting,setIsDeleting]=useState(false);useEffect(()=>{if(!user){navigate('/login');}},[user,navigate]);useEffect(()=>{if(user){setFormData((f)=>({...f,name:user.name||'',email:user.email||'',}));}},[user]);const showToast=(text,type)=>{if(type==='success')toast.success(text);else if(type==='error')toast.error(text);else toast.info(text);};const handleChange=(e)=>{setFormData((prev)=>({...prev,[e.target.name]:e.target.value}));};const handleSubmit=async(e)=>{e.preventDefault();if(formData.newPassword||formData.confirmPassword){if(!formData.currentPassword){showToast('Current password is required to change password','error');return;}if(formData.newPassword !==formData.confirmPassword){showToast('New passwords do not match','error');return;}}try{const token=localStorage.getItem('accessToken');let payload={name:formData.name,email:formData.email,originalEmail:user.email,};if(formData.newPassword){payload.currentPassword=formData.currentPassword;payload.newPassword=formData.newPassword;}const response=await http.put('/user/profile',{method:'PUT',headers:{'Content-Type':'application/json',Authorization:`Bearer ${token}`,},body:JSON.stringify(payload),});const result=await response.json();console.log(result)if(response.ok){showToast('Profile updated successfully!','success');setUser({...user,name:formData.name,email:formData.email});localStorage.setItem('user',JSON.stringify({...user,name:formData.name,email:formData.email}));setTimeout(()=>navigate('/home'),1500);}else{showToast(result.message||'Failed to update profile.','error');}}catch(error){console.log(error)showToast('Something went wrong!','error');}};const handleDeleteAccount=()=>{setShowModal(true);};const confirmDelete=async()=>{setIsDeleting(true);try{const token=localStorage.getItem('accessToken');const response=await http.delete('/user/profile',{method:'DELETE',headers:{'Content-Type':'application/json',Authorization:`Bearer ${token}`,},body:JSON.stringify({originalEmail:user.email}),});const result=await response.json();if(response.ok){showToast('Your account has been deleted.','success');localStorage.removeItem('user');localStorage.removeItem('token');setTimeout(()=>{setUser(null);navigate('/');},1500);}else{showToast(result.message||'Failed to delete account.','error');}}catch(error){showToast('Something went wrong!','error');}finally{setIsDeleting(false);setShowModal(false);}};return(<Box
maxWidth={500}mx="auto"
mt={8}p={3}bgcolor="background.paper"
borderRadius={2}boxShadow={3}><ToastContainer position="top-right" autoClose={3000}/><Typography variant="h4" align="center" mb={3}>Edit Profile</Typography><form onSubmit={handleSubmit}><TextField
label="Name"
name="name"
fullWidth
margin="normal"
value={formData.name}onChange={handleChange}/><TextField
label="Email"
name="email"
fullWidth
margin="normal"
type="email"
value={formData.email}onChange={handleChange}/><TextField
label="Current Password"
name="currentPassword"
type="password"
fullWidth
margin="normal"
value={formData.currentPassword}onChange={handleChange}/><TextField
label="New Password"
name="newPassword"
type="password"
fullWidth
margin="normal"
value={formData.newPassword}onChange={handleChange}/><TextField
label="Confirm New Password"
name="confirmPassword"
type="password"
fullWidth
margin="normal"
value={formData.confirmPassword}onChange={handleChange}/><Button variant="contained" type="submit" fullWidth sx={{mt:2}}>Save Changes</Button><Button
variant="outlined"
color="error"
fullWidth
sx={{mt:2}}onClick={handleDeleteAccount}disabled={isDeleting}>{isDeleting?<CircularProgress size={24}/>:'Delete Account'}</Button></form><ConfirmModal
show={showModal}onClose={()=>setShowModal(false)}onConfirm={confirmDelete}message="Are you sure you want to delete your account?This action cannot be undone."
isLoading={isDeleting}/></Box>);}

// ./client/src/App.jsx
import './App.css';import Home from './pages/Home';import Reviews from './pages/Reviews';import Review from './pages/Review';import AddReview from './pages/AddReview';import EditReview from './pages/EditReview';import Register from './pages/Register';import Login from './pages/Login';import EditProfile from './pages/EditProfile';import AdminPage from './pages/Admin';import ManageUsers from './pages/ManageUsers';import UserContext from './contexts/UserContext';import{Container,AppBar,Box,Button,Toolbar,Typography,}from '@mui/material';import{BrowserRouter as Router,Routes,Route,Link,useLocation}from 'react-router-dom';import{useState,useEffect}from 'react';import{ThemeProvider}from '@mui/material/styles';import MyTheme from './themes/MyTheme';import http from './http';function AppBarLinks({user,logout}){console.log("id:",user);const location=useLocation();const currentPath=location.pathname;if(user){return(<><Typography sx={{mr:2}}>{user.name}</Typography><Button component={Link}to="/edit-profile" color="inherit" sx={{mr:2}}>Edit Profile</Button>{user.isAdmin?<Button component={Link}color="inherit" to="/admin">Admin</Button>:null}<Button color="inherit" onClick={logout}>Logout</Button></>);}else{return(<><Button component={Link}to={`/register?from=${encodeURIComponent(currentPath)}`}color="inherit">Register</Button><Button component={Link}to={`/login?from=${encodeURIComponent(currentPath)}`}color="inherit">Login</Button></>);}}function App(){const [user,setUser]=useState(null);useEffect(()=>{if(localStorage.getItem('accessToken')){http.get('/user/auth').then((res)=>{setUser(res.data.user);});}},[]);const logout=()=>{if(window.confirm('Are you sure you want to logout?')){localStorage.clear();setUser(null);window.location.href='/';}};return(<UserContext.Provider value={{user,setUser}}><Router><ThemeProvider theme={MyTheme}><AppBar position="static" className="AppBar"><Container><Toolbar disableGutters={true}><Button
component={Link}to="/"
variant="text"
sx={{color:'white',textTransform:'none',fontWeight:'bold',fontSize:20}}>Descode</Button><Button component={Link}to="/reviews" color="inherit">Reviews</Button><Box sx={{flexGrow:1}}></Box><AppBarLinks user={user}logout={logout}/></Toolbar></Container></AppBar><Container><Routes><Route path="/" element={<Home/>}/><Route path="/reviews" element={<Reviews/>}/><Route path="/reviews/:id" element={<Review/>}/><Route path="/addreview" element={<AddReview/>}/><Route path="/editreview/:id" element={<EditReview/>}/><Route path="/register" element={<Register/>}/><Route path="/login" element={<Login/>}/><Route path="/edit-profile" element={<EditProfile/>}/><Route path="/admin" element={<AdminPage/>}/><Route path="/manage-users" element={<ManageUsers/>}/></Routes></Container></ThemeProvider></Router></UserContext.Provider>);}export default App;

// ./client/src/http.js
import axios from "axios";const instance=axios.create({baseURL:import.meta.env.VITE_API_BASE_URL});instance.interceptors.request.use(function(config){let accessToken=localStorage.getItem("accessToken");if(accessToken){config.headers["Authorization"]=`Bearer ${accessToken}`;}if(config.data&&config.data.user){delete config.data.user;}return config;},function(error){return Promise.reject(error);});instance.interceptors.response.use(function(response){return response;},function(error){if(error.response.status===401||error.response.status===403){localStorage.clear();window.location="/login";}return Promise.reject(error);});export default instance;

// ./server/models/Admin.js


// ./server/models/User.js
// server/models/User.js
module.exports=(sequelize,DataTypes)=>{const User=sequelize.define("User",{id:{type:DataTypes.INTEGER,primaryKey:true,autoIncrement:true},name:{type:DataTypes.STRING(50),allowNull:false},email:{type:DataTypes.STRING(50),allowNull:false},isAdmin:{type:DataTypes.BOOLEAN,defaultValue:false},password:{type:DataTypes.STRING(100),allowNull:false},createdAt:{type:DataTypes.DATE,allowNull:false,defaultValue:DataTypes.NOW},updatedAt:{type:DataTypes.DATE,allowNull:false,defaultValue:DataTypes.NOW},deleted:{type:DataTypes.BOOLEAN,allowNull:false,defaultValue:false}},{tableName:'users',timestamps:true});User.associate=(models)=>{User.hasMany(models.Review,{foreignKey:'reviewerId',as:'Reviews'});User.hasMany(models.ReviewVote,{foreignKey:'UserID',as:'ReviewVotes'});User.hasMany(models.ReplyVote,{foreignKey:'UserID',as:'ReplyVotes'});};return User;};

// ./server/routes/reviews.js
// server/routes/reviews.js
const express=require('express');const router=express.Router();const{User,Review,ReviewReply,Admin,ReviewVote}=require('../models');const{wiz}=require('../utils');const{Op,fn,col}=require("sequelize");const{validateToken}=require('../middlewares/auth');const yup=require("yup");let recentSubmissions={};const SPAM_LIMIT=3;function isSpam(userId,content){const now=Date.now();console.log(recentSubmissions);if(!recentSubmissions[userId]){recentSubmissions[userId]=[];}recentSubmissions[userId]=recentSubmissions[userId].filter(sub=>now - sub.time<5 * 60 * 1000);const similarCount=recentSubmissions[userId].filter(sub=>sub.content.includes(content.title)||sub.content.includes(content.description)).length;if(similarCount>=SPAM_LIMIT)return true;recentSubmissions[userId].push({content:`${content.title}${content.description}`,time:now});return false;}router.post("/",validateToken,async(req,res)=>{let data=req.body;data.reviewerId=req.user.id;if(isSpam(req.user.id,data)){return res.status(400).json({error:"Spam detected. Too many similar submissions."});}const validationSchema=yup.object({title:yup.string().trim().min(3).max(100).required(),description:yup.string().trim().min(3).max(500).required(),stars:yup.number().min(1).max(5).required()});try{data=await validationSchema.validate(data,{abortEarly:false});data.reviewerId=req.user.id;const result=await Review.create(data);const reviewWithUser=await Review.findByPk(result.id,{include:{model:User,as:'reviewer',attributes:['name']}});res.json(reviewWithUser);}catch(err){wiz(err,`Error while creating review:`)res.status(400).json({errors:err.errors});}});router.get('/',async(req,res)=>{let userId=null;const authHeader=req.headers.authorization;if(authHeader&&authHeader.startsWith("Bearer ")){try{const token=authHeader.split(" ")[1];const decoded=require('jsonwebtoken').verify(token,process.env.APP_SECRET);userId=decoded.id;}catch(err){userId=null;}}try{const{search,scope}=req.query;let where={};if(search){if(scope==='title'){where.title={[Op.like]:`%${search}%`};}else if(scope==='content'){where.description={[Op.like]:`%${search}%`};}else{where[Op.or]=[{title:{[Op.like]:`%${search}%`}},{description:{[Op.like]:`%${search}%`}}];}}const reviewsRaw=await Review.findAll({where:{...where,deleted:false},include:[{model:User,as:'reviewer',attributes:['id','name']},{model:ReviewReply,as:'replies',attributes:[]},{model:ReviewVote,as:'reviewVotes',where:userId?{UserID:userId}:undefined,required:false,attributes:['Upvote']}],attributes:{include:[[fn('COUNT',col('replies.ReplyID')),'replyCount']]},group:['Review.id','reviewer.id','reviewVotes.ReviewID','reviewVotes.UserID'],order:[['postDateTime','DESC']]});const reviews=reviewsRaw.map(r=>{const vote=r.reviewVotes?.[0];return{...r.get({plain:true}),liked:vote?.Upvote===true,disliked:vote?.Upvote===false};});res.json(reviews);}catch(err){wiz(err,"Error while fetching reviews with reply counts:");res.status(500).json({error:"Failed to fetch reviews."});}});router.get("/:id",async(req,res)=>{const id=req.params.id;let userId=null;const authHeader=req.headers.authorization;if(authHeader&&authHeader.startsWith("Bearer ")){try{const token=authHeader.split(" ")[1];const decoded=require('jsonwebtoken').verify(token,process.env.APP_SECRET);userId=decoded.id;}catch(err){userId=null;}}try{const reviewObj=await Review.findByPk(id,{include:[{model:User,as:'reviewer',attributes:['id','name']},{model:ReviewVote,as:'reviewVotes',where:userId?{UserID:userId}:undefined,required:false,attributes:['Upvote']}]});if(!reviewObj||reviewObj.deleted)return res.sendStatus(404);const plainReview=reviewObj.get({plain:true});const vote=plainReview.reviewVotes?.[0];const response={...plainReview,liked:vote?.Upvote===true,disliked:vote?.Upvote===false};res.json(response);}catch(err){wiz(err,`Error fetching review #${id}`);res.status(500).json({error:"Failed to fetch review."});}});router.get('/:id/replies',async(req,res)=>{try{const replies=await ReviewReply.findAll({where:{ReviewID:req.params.id},include:[{model:Admin,as:'Replier',attributes:['name','email']}],order:[['PostDateTime','ASC']]});res.json(replies);}catch(err){wiz(err,'Error fetching replies:');res.status(500).json({error:'Failed to fetch replies'});}});router.put("/:id",validateToken,async(req,res)=>{let id=req.params.id;let userId=req.user.id;try{const review=await Review.findByPk(id);if(!review||review.deleted){res.sendStatus(404);return;}if(review.reviewerId !==userId){res.sendStatus(403);return;}if(req.body.deleted===true){const num=await Review.update({deleted:true,editDateTime:new Date()},{where:{id}});if(num[0]===1){res.json({message:"Review was deleted(soft)successfully."});}else{res.status(400).json({message:`Cannot delete review with id ${id}.`});}return;}const{title,description,stars}=req.body;const num=await Review.update({title,description,stars,editDateTime:new Date()},{where:{id}});if(num[0]===1){res.json({message:"Review was updated successfully."});}else{res.status(400).json({message:`Cannot update review with id ${id}.`});}}catch(err){wiz(err,`Error while updating review #${id}:`)res.status(500).json({error:"Failed to update review."});}});router.delete("/:id",validateToken,async(req,res)=>{let id=req.params.id;let userId=req.user.id;try{const review=await Review.findByPk(id);if(!review||review.deleted){res.sendStatus(404);return;}if(review.reviewerId !==userId){res.sendStatus(403);return;}review.deleted=true;await review.save();const num=await Review.update({deleted:true},{where:{id}});if(num[0]===1){res.json({message:"Review was deleted successfully."});}else{res.status(400).json({message:`Cannot delete review with id ${id}.`});}}catch(err){wiz(err,`Error while deleting review #${id}:`)res.status(500).json({error:"Failed to delete review."});}});router.post('/:id/vote',validateToken,async(req,res)=>{const reviewId=parseInt(req.params.id);const userId=req.user.id;const{upvote}=req.body;if(typeof upvote !=='boolean'){return res.status(400).json({error:"Invalid vote value. Must be boolean."});}try{const existingVote=await ReviewVote.findOne({where:{ReviewID:reviewId,UserID:userId}});if(existingVote){if(existingVote.Upvote===upvote){await existingVote.destroy();}else{existingVote.Upvote=upvote;await existingVote.save();}}else{await ReviewVote.create({ReviewID:reviewId,UserID:userId,Upvote:upvote});}const upvotes=await ReviewVote.count({where:{ReviewID:reviewId,Upvote:true}});const downvotes=await ReviewVote.count({where:{ReviewID:reviewId,Upvote:false}});await Review.update({upvotes,downvotes},{where:{id:reviewId}});res.json({message:"Vote updated",upvotes,downvotes});}catch(err){wiz(err,"Error processing vote:");res.status(500).json({error:"Failed to process vote."});}});module.exports=router;

// ./server/routes/user.js
// server/routes/user.js
const express=require('express');const router=express.Router();const bcrypt=require('bcrypt');const{User}=require('../models');const{wiz}=require('../utils');const yup=require('yup');const{sign}=require('jsonwebtoken');const{validateToken}=require('../middlewares/auth');require('dotenv').config();const mapYupErrors=(err)=>err.errors?err.errors.join(' '):'Validation failed.';function adminOnly(req,res,next){if(!req.user||!req.user.isAdmin){return res.sendStatus(403);}next();}router.post("/register",async(req,res)=>{let data=req.body;let validationSchema=yup.object({name:yup.string().trim().min(3).max(50).required().matches(/^[a-zA-Z '-,.]+$/,"Name only allow letters,spaces and characters:' - ,."),email:yup.string().trim().lowercase().email().max(50).required(),password:yup.string().trim().min(8).max(50).required().matches(/^(?=.*[a-zA-Z])(?=.*[0-9]).{8,}$/,"Password at least 1 letter and 1 number")});try{data=await validationSchema.validate(data,{abortEarly:false});let user=await User.findOne({where:{email:data.email}});if(user){return res.status(400).json({message:"Email already exists."});}data.password=await bcrypt.hash(data.password,10);let result=await User.create(data);let userInfo={id:result.id,email:result.email,name:result.name,isAdmin:result.isAdmin};let accessToken=sign(userInfo,process.env.APP_SECRET,{expiresIn:process.env.TOKEN_EXPIRES_IN});res.json({accessToken,user:userInfo,message:'Registration successful!'});}catch(err){wiz(err,"Error while registering:\n")return res.status(400).json({message:mapYupErrors(err)});}});router.post("/login",async(req,res)=>{let data=req.body;let validationSchema=yup.object({email:yup.string().trim().lowercase().email().max(50).required(),password:yup.string().trim().min(8).max(50).required().matches(/^(?=.*[a-zA-Z])(?=.*[0-9]).{8,}$/,"Password must have at least 1 letter and 1 number")});try{data=await validationSchema.validate(data,{abortEarly:false});let user=await User.findOne({where:{email:data.email}});if(!user){return res.status(400).json({message:"Email or password is not correct."});}let match=await bcrypt.compare(data.password,user.password);if(!match){return res.status(400).json({message:"Email or password is not correct."});}let userInfo={id:user.id,email:user.email,name:user.name,isAdmin:user.isAdmin};let accessToken=sign(userInfo,process.env.APP_SECRET,{expiresIn:process.env.TOKEN_EXPIRES_IN});res.json({accessToken:accessToken,user:userInfo});}catch(err){wiz(err,"Error while logging in:\n")res.status(400).json({errors:err.errors});}});router.get("/auth",validateToken,(req,res)=>{let userInfo={id:req.user.id,email:req.user.email,name:req.user.name,isAdmin:req.user.isAdmin,};res.json({user:userInfo});});router.put('/profile',validateToken,async(req,res)=>{try{const user=await User.findOne({where:{email:req.user.email,deleted:false}});if(!user)return res.status(404).json({message:'User not found.'});const{name,email,originalEmail,currentPassword,newPassword}=req.body;if(email&&originalEmail !==user.email){return res.status(400).json({message:'Original email does not match.'});}if(newPassword){if(!currentPassword){return res.status(400).json({message:'Current password is required to change password.'});}const bcrypt=require('bcrypt');const match=await bcrypt.compare(currentPassword,user.password);if(!match){return res.status(400).json({message:'Current password is incorrect.'});}user.password=await bcrypt.hash(newPassword,10);}if(name)user.name=name;if(email)user.email=email;await user.save();res.json({message:'Profile updated successfully.'});}catch(err){wiz(err,'Error while updating user profile:\n');res.status(500).json({message:'Failed to update profile.'});}});router.delete('/profile',validateToken,async(req,res)=>{try{const user=await User.findOne({where:{email:req.user.email,deleted:false}});if(!user)return res.status(404).json({message:"User not found."});user.deleted=true;await user.save();res.json({message:"User deleted successfully."});}catch(err){wiz(err,"Error while deleting user:\n");res.status(500).json({message:"Failed to delete user."});}});router.get("/",validateToken,adminOnly,async(req,res)=>{try{const users=await User.findAll({where:{deleted:false},attributes:['id','name','email','isAdmin','createdAt','updatedAt']});res.json(users);}catch(err){wiz(err,"Error fetching users:\n");res.status(500).json({message:"Failed to fetch users."});}});router.put('/:id',validateToken,adminOnly,async(req,res)=>{const{id}=req.params;try{const user=await User.findByPk(id);if(!user||user.deleted){return res.status(404).json({message:'User not found.'});}const{name,email,isAdmin}=req.body;if(name)user.name=name;if(email)user.email=email;if(typeof isAdmin==='boolean')user.isAdmin=isAdmin;await user.save();res.json({user});}catch(err){wiz(err,`Error updating user #${id}:\n`);res.status(500).json({message:'Failed to update user.'});}});router.delete('/:id',validateToken,adminOnly,async(req,res)=>{const{id}=req.params;try{const user=await User.findByPk(id);if(!user||user.deleted){return res.status(404).json({message:'User not found.'});}user.deleted=true;await user.save();res.json({message:'User deleted successfully.'});}catch(err){wiz(err,`Error deleting user #${id}:\n`);res.status(500).json({message:'Failed to delete user.'});}});module.exports=router;

// ./server/index.js
// server/index.js
require('dotenv').config();const express=require('express');const cors=require('cors');const app=express();app.use(express.json());app.use(cors({origin:process.env.CLIENT_URL}));app.get("/",(req,res)=>{res.send("Welcome to the learning space.");});const reviewRoute=require('./routes/reviews');app.use("/reviews",reviewRoute);const userRoute=require('./routes/user');app.use("/user",userRoute);const fileRoute=require('./routes/file');app.use("/file",fileRoute)const db=require('./models');if(require.main===module){db.sequelize.sync({alter:true}).then(()=>{let port=process.env.APP_PORT;app.listen(port,()=>{console.log(`ââ®ââ´â­â®â­â®â­â®ââ®ââ´  â­â®ââ´ââ®â·â·ââ´ââ®
âââ â°â®â âââââ   â°â®â â âââ â
ââ¯ââ´â°â¯â°â¯â°â¯ââ¯ââ´  â°â¯ââ´âµ ââ¯ââ´âµ
Server running on http:});}).catch((err)=>{console.log(err);});}module.exports=app;